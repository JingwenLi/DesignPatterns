模式定义
    简单工厂模式(Simple Factory Pattern)：它属于类创建型模式, 可以根据参数的不同返回不同类的实例。
    简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。


简单工厂模式包含如下角色：
    Factory：工厂角色
        工厂角色负责实现创建所有实例的内部逻辑

    Product：抽象产品角色
        抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口

    ConcreteProduct：具体产品角色
        具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。

优点
    封装: 把对象的创建和业务逻辑层分开
    单一职责: 使用者不需要了解类是怎么被创建的, 仅仅需要负责“消费”对象就可以了

缺点：
    违背了“开放封闭原则”: “系统对扩展开放，对修改关闭”, 每次增加一个类的时候必须修改工厂类
    当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；


缺点
由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。
当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；
这些缺点在工厂方法模式中得到了一定的克服。