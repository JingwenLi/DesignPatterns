模式定义
    工厂方法(Factory Method): 定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。
    核心工厂类不再负责产品的创建，这样核心类成为一个抽象工厂角色，仅负责具体工厂子类必须实现的接口，
    这样进一步抽象化的好处是使得工厂方法模式可以使系统在不修改具体工厂角色的情况下引进新的产品。

工厂方法模式包含如下角色：
    Factory：抽象工厂角色
        定义了创建抽象产品的方法，任何在模式中创建对象的工厂类都必须实现这个接口

    ConcreteFactory：具体工厂角色
        实现抽象工厂接口的具体工厂类，负责生产具体的产品

    Product：抽象产品角色
        工厂类所创建的所有产品的父类，封装了产品对象的公共方法

    ConcreteProduct：具体产品角色
        实现了抽象产品角色所定义的接口。某具体产品由具体工厂创建，往往一一对应

优点
    1.良好的封装性，在工厂方法模式中，工厂方法用来创建业务所需要的产品，同时还向客户隐藏了具体产品的创建细节，只需要关心所需产品对应的工厂，降低了模块间的耦合性。
    2.良好的扩展性，当系统中需要加入新产品时，无须修改抽象工厂和抽象产品提供的接口，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以完成系统的扩展。
    3.屏蔽产品类，这一特点非常重要，产品类的实现如何变化，调用者都不需要关心，它只需要关心产品的接口，只要接口保持不变，系统中的上层模块就不会发生变化。

缺点
    1.类的个数容易过多，增加复杂度
    2.增加了系统的抽象性和理解难度

适用场景
    1.重复代码: 创建对象需要使用大量重复的代码
    2.对于始何创建对象不关心
    3.创建对象 : 一个类通过其子类来指定创建哪个对象
