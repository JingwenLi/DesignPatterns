模式定义
	抽象工厂模式是用于解决“一类产品”的创建问题

包含如下角色：
    Factory：抽象工厂角色
        有几类产品，则声明几个方法
    
    ConcreteFactory：具体工厂角色

    Product：抽象产品角色

    ConcreteProduct：具体产品角色

优点
    1.良好的封装性，在工厂方法模式中，工厂方法用来创建业务所需要的产品，同时还向客户隐藏了具体产品的创建细节，只需要关心所需产品对应的工厂，降低了模块间的耦合性。
    2.良好的扩展性，当系统中需要加入新产品时，无须修改抽象工厂和抽象产品提供的接口，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以完成系统的扩展。
    3.屏蔽产品类，这一特点非常重要，产品类的实现如何变化，调用者都不需要关心，它只需要关心产品的接口，只要接口保持不变，系统中的上层模块就不会发生变化。

缺点
    1.类的个数容易过多，增加复杂度
    2.增加了系统的抽象性和理解难度
    3.实现抽象工厂接口的具体工厂只能生产出一种产品

适用场景
    1.重复代码: 创建对象需要使用大量重复的代码
    2.对于始何创建对象不关心
    3.创建对象 : 一个类通过其子类来指定创建哪个对象


抽象工厂模式 VS 工厂方法模式
    工厂方法模式是针对一个产品的 => 一个产品一个工厂类
    而抽象工厂模式是针对多个产品的 => 多个产品一个工厂类