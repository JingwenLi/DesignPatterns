原型模式（Prototype）用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。

	通过复制一个已经存在的实例来创建一个新的实例，而且不需知道任何创建的细节。被复制的实例被称为原型，这个原型是可定制的。
	所有的原型类都必须有一个通用的接口，使得即使在对象所属的具体类未知的情况下也能复制对象。 
	原型对象可以生成自身的完整副本， 因为相同类的对象可以相互访问对方的私有成员变量。


原型模式下主要角色:
	原型（Prototype）：声明一个克隆自身的接口，该角色一般有抽象类(Prototype)、接口(ICloneable)两种实现方式。
	具体原型类（ConcretePrototype）：实现原型(抽象类或接口)的 Clone() 方法，它是可被复制的对象。
	访问类（Client）：使用具体原型类中的 Clone() 方法来复制新的对象。

实现
假如有一个测试用例模板，项目A正在使用，公司又引进一个项目B，项目B的测试用例模板自己重新写一套肯定非常麻烦，那么可以使用项目A的用例模板，拿来改改就可以使用了。省却了许多时间。

使用浅拷贝实现：
	将原来对象中的所有字段逐个复制到一个新对象，如果字段是值类型，则简单地复制一个副本到新对象，改变新对象的值类型字段不会影响原对象；如果字段是引用类型，则复制的是引用，改变目标对象中引用类型字段的值将会影响原对象。
	例如, 如果一个对象有一个指向引用类型（如测试用例的名称）的字段, 并且我们对该对象做了一个浅复制, 那麽两个对象将引用同一个引用（即同一个测试用例名称）。


使用深拷贝实现：
	与浅复制不同之处在于对引用类型的处理，深复制将新对象中引用类型字段指向复制过的新对象，改变新对象中引用的任何对象，不会影响到原来的对象中对应字段的内容。
	例如，如果一个对象有一个指向引用类型（如测试用例的名称）的字段，并且对该对象做了一个深复制的话，将创建一个新的对象（即新的测试用例名称）。