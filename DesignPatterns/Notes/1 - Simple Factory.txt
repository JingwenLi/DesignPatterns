模式定义
    简单工厂模式专门定义一个类来负责创建其他类的实例，可以根据参数的不同返回不同的实例，被创建的实例通常都具有共同的父类。

包含如下角色：
    Factory：工厂角色
        负责实现所有实例的创建逻辑

    Product：抽象产品角色
        工厂类所创建的所有产品的父类，封装了产品对象的公共方法

    ConcreteProduct：具体产品角色
        是创建的目标

优点
    1.可以降低代码耦合，把对象的创建和业务逻辑层分开，实现了责任的分割
    2.可以有效的进行代码复用，如客户端A和客户端B都需要一个具体对象，客户端A和客户端B可以通过同一个简单工厂来获取具体类型的实例

缺点
    1.违背了“开闭原则”: “对扩展开放，对修改关闭”, 每次增加一个类的时候必须修改工厂类
    2.工厂内集中了所有产品创建逻辑，一旦不能正常工作，所有产品都会受到影响
    3.当抽象产品类很多时，工厂会很臃肿

适用场景
     1.对于如何创建对象不关心
     2.工厂类负责创建的对象比较少，创建逻辑比较简单
