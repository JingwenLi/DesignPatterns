模式定义
	将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示

包含如下角色：
	Builder：抽象建造者
		声明为创建一个产品对象的各个部件指定的抽象接口/抽象类

	ConcreteBuilder：具体建造者
		实现抽象建造者接口，构建和装配各个部件

	Director：指挥者
		它负责安排对象的建造次序

	Product：产品角色
		具体的产品对象

优点
	1.可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。
	2.增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”

缺点
	1.建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的限制

建造者模式适用场景 :
	结构复杂 : 对象有非常复杂的内部结构, 有很多属性
	分离创建和使用 : 想把复杂对象的创建和使用分离
	当创造一个对象, 需要很多步骤时, 适合使用建造者模式
	当创造一个对象, 只需要一个简单的方法就可以完成, 适合使用工厂模式

参考：
	https://www.jianshu.com/p/47a147a39fde


建造者模式更加注重方法的调用顺序,工厂模式注重创建对象

工厂方法模式 VS 建造者模式
	工厂方法模式注重的是整体对象的创建方式；而建造者模式注重的是部件构建的过程，意在通过一步一步地精确构造创建出一个复杂的对象。

	我们举个简单例子来说明两者的差异，如要制造一个超人，如果使用工厂方法模式，直接产生出来的就是一个力大无穷、能够飞翔、内裤外穿的超人；而如果使用建造者模式，则需要组装手、头、脚、躯干等部分，然后再把内裤外穿，于是一个超人就诞生了。

抽象工厂模式 VS 建造者模式
	抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。

	建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。

	如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。

