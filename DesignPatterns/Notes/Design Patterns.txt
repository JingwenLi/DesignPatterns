设计模式是
	软件开发人员在软件开发过程中面临的一般问题的解决方案
	这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

将设计模式引入软件设计和开发过程，其目的在于要重用软件开发经验
让程序低耦合、高复用、高内聚、易拓展、易维护


高内聚通常是指一个软件的模块的内部组成关系比较紧凑，使得一个模块可以良好的完成一个任务；
低耦合通常是指一个软件的模块与模块的之间不存在较为复杂的依赖，使得一个模块的变动对其他的模块影响较小。 

高内聚低耦合通常是衡量一个软件设计中的模块的独立程度的标准，一个秉持“高内聚，低耦合”初衷开发出来的软件，其模块的复用性与可移植性通常都比那些“低内聚、高耦合”的软件高出不少，面向对象设计则是高内聚低耦合使用的佼佼者， 高内聚低耦合原则也是面向对象设计的重要核心之一。

设计模式是
	软件开发人员在软件开发过程中面临的一般问题的解决方案
	这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

主要作用为以下几种：
（1）重用设计，重用设计比重用代码更有意义，它会自动带来代码的重用
（2）为设计提供共同的词汇，每个模式名就是一个设计词汇，其概念是的程序员间的交流更加方便。
（3）在开发文档中采用模式词汇可以让其他人更容易理解你的想法和做法，编写开发文档也更方便。
（4）应用设计模式可以让重构系统变得容易，可以确保开发正确的代码，并降低在设计或实现中出现的错误的可能。
（5）支持变化，可以为重写其他应用程序提供很好的系统架构。
（6）正确设计模式，可以节省大量时间。

WHY？为什么要使用设计模式
在思考为什么要使用设计模式之前，让我们先来思考如何设计一款优秀的软件？当然这里的软件指的是软件的实现架构。让我们思考一下软件架构设计所需要达成的目标，以及设计模式如何在这其中发挥作用

代码复用
对于软件开发而言，成本和时间永远是最重要的。代码复用是减少开发成本最常用的方式之一，这个想法看起来非常自然，但是实际在开发过程中，要让已有代码能够适配新的场景往往还是需要付出额外的代价。例如，不同的模块之间存在紧密的耦合关系，这使得复用这些代码变得更加困难。

对于代码复用来说，最底层的复用通常会涉及到类、类库、容器等等可以独立存在的个体。最高层的复用则是通过各种具体的框架，使用框架定义好的各种接口，精简你的设计，通过框架定义好的抽象概念来设计具体的业务流程，最后通过类来表示这些概念并且描述它们的关系。框架通常会具有比单个类更大的颗粒度，想要修改框架是一个困难且复杂的工作。因此，我们可以插入一个中间层，这即是设计模式所处的位置。设计模式比框架更加小巧，实际上设计模式描述的是一组类之间的关系及其互动方式，设计模式向下连接了最底层的类，向上为框架提供可以更灵活、更易用的接口。

拓展性
想要遇到完全不变的需求就是在做梦。需求的变化是无法避免的，有经验的程序员能够在程序设计的阶段就为未来程序可能的变更留下足够的灵活空间。设计模式的存在即是帮助程序员们更好的面对未来需求的变化，在设计时就为将来的变化做好准备，来降低未来面对变更的开销